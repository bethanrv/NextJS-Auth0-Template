{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport const createClient = async () => {\n  const cookieStore = await cookies() // Add await here\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          cookieStore.set({ name, value, ...options })\n        },\n        remove(name: string, options: CookieOptions) {\n          cookieStore.set({ name, value: '', ...options })\n        }\n      }\n    }\n  )\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;;;AAGO,MAAM,eAAe;IAC1B,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,IAAI,iBAAiB;;IAErD,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,YAAY,GAAG,CAAC;oBAAE;oBAAM;oBAAO,GAAG,OAAO;gBAAC;YAC5C;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,YAAY,GAAG,CAAC;oBAAE;oBAAM,OAAO;oBAAI,GAAG,OAAO;gBAAC;YAChD;QACF;IACF;AAEJ"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/app/api/cron-write/route.ts"],"sourcesContent":["import { createClient } from '@/utils/supabase/server';\nimport { rejects } from 'assert';\nimport { NextResponse } from 'next/server';\nimport { resolve } from 'path';\n\ninterface Fighter {\n  name : string;\n  full_name : string | null;\n  fighter_id : string;\n}\n\ninterface FighterList {\n  fighter_1 : Fighter;\n  fighter_2 : Fighter;\n}\n\ninterface Division {\n  name : string;\n  weight_lb: number;\n}\n\ninterface Event {\n  poster_image_url : string | null\n}\n\ninterface Fight {\n  title : string;\n  slug : string;\n  date : string;\n  location : string;\n  status : string;\n  scheduled_rounds : number;\n  fighters : FighterList;\n  division : Division;\n  id : string;\n  event : Event\n}\n\n// Fetch fights for next week from boxing-data-api\nasync function fetchFightSchedule() {\n  try {\n    const url = new URL('https://boxing-data-api.p.rapidapi.com/v1/fights/schedule');\n    const params = {\n      days: 7,\n      date_sort: 'ASC',\n      page_num: 1,\n      page_size: 25\n    };\n\n    // Add query parameters to URL\n    Object.entries(params).forEach(([key, value]) => {\n      url.searchParams.append(key, value.toString());\n    });\n\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': process.env.BOXING_API_KEY,\n        'X-RapidAPI-Host': 'boxing-data-api.p.rapidapi.com'\n      },\n      cache: 'no-store' // Bypass cache for fresh data\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error('Error fetching fight schedule:', error);\n    throw error;\n  }\n}\n\n// check if our db has this fight id already\nasync function dbHasFight(supabase : any, id : string) {\n  const { data, error } = await supabase.from('fights').select('*').eq('event_id', id);\n  if (error) {\n    console.error('dbHasFight query error:', error);\n    throw error;\n  }\n  return (data && data.length > 0)\n}\n\n// add new fight\nasync function insertFight(supabase : any, fight : Fight) {\n  const { data, error } = await supabase\n    .from('fights')\n    .insert({\n      event_id: fight.id,\n      title : fight.title,\n      slug : fight.slug,\n      date : fight.date,\n      location : fight.location,\n      status : fight.status,\n      scheduled_rounds : fight.scheduled_rounds,\n      fighter_1_name : fight.fighters.fighter_1.name,\n      fighter_2_name : fight.fighters.fighter_2.name,\n      fighter_1_id : fight.fighters.fighter_1.fighter_id,\n      fighter_2_id :  fight.fighters.fighter_2.fighter_id,\n      division_name : fight.division.name,\n      division_weight_lb : fight.division.weight_lb,\n      poster_image_url : fight.event.poster_image_url\n    })\n    .select('*')\n    .single();\n  if (error) {\n    console.error('Insert error:', error);\n    throw error;\n  }\n  return data;\n}\n\n// update fights in supbase\nasync function updateFights(supabase : any) {\n  \n  // get fight schedule\n  const fightSchedule = await fetchFightSchedule() as Fight[]\n\n  // add new fights\n  for( const fight of fightSchedule ) {\n    if ( !(await dbHasFight(supabase, fight.id)) ) {\n      insertFight(supabase, fight)\n    }\n  }\n}\n\n// delete from fights (for testing)\nasync function deleteFights(supabase : any) {\n  const { data, error } = await supabase\n  .from('fights')\n  .delete()\n  .not('id', 'is', null);\n}\n\n\nexport async function GET(request: Request) {\n\n  // Authorization check first\n  const authHeader = request.headers.get('Authorization');\n  if (!authHeader || authHeader !== `Bearer ${process.env.CRON_SECRET}`) {\n    return new NextResponse('Unauthorized', {\n      status: 401,\n      headers: { 'WWW-Authenticate': 'Bearer' }\n    });\n  }\n\n  // start db client\n  const supabase = await createClient();\n\n  // await deleteFights(supabase)\n  \n  // add new fights\n  try {\n    await updateFights(supabase) // get fights from the betting api and add any new results\n    return NextResponse.json({\n      success: true\n    });\n  } catch (err: any) {\n    console.error('Cron job failed:', err.message);\n    return NextResponse.json(\n      { success: false, error: err.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport const dynamic = 'force-dynamic';\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}