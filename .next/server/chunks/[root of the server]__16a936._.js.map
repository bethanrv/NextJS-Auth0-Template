{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport const createClient = async () => {\n  const cookieStore = await cookies() // Add await here\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          cookieStore.set({ name, value, ...options })\n        },\n        remove(name: string, options: CookieOptions) {\n          cookieStore.set({ name, value: '', ...options })\n        }\n      }\n    }\n  )\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;;;AAGO,MAAM,eAAe;IAC1B,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,IAAI,iBAAiB;;IAErD,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,YAAY,GAAG,CAAC;oBAAE;oBAAM;oBAAO,GAAG,OAAO;gBAAC;YAC5C;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,YAAY,GAAG,CAAC;oBAAE;oBAAM,OAAO;oBAAI,GAAG,OAAO;gBAAC;YAChD;QACF;IACF;AAEJ"}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/app/api/cron-write/route.ts"],"sourcesContent":["import { createClient } from '@/utils/supabase/server';\nimport { rejects } from 'assert';\nimport { NextResponse } from 'next/server';\nimport { resolve } from 'path';\n\ninterface ScoreResponse {\n    id : string,\n    sport_key : string,\n    sport_title : string,\n    commence_time : string,\n    completed : string,\n    home_team : string,\n    away_team : string,\n    scores : string,\n    last_updated : string\n}\n\nexport async function GET(request: Request) {\n  // Authorization check first\n  const authHeader = request.headers.get('Authorization');\n  console.log('authHeader')\n  console.log(authHeader)\n  console.log('process.env.CRON_SECRET')\n  console.log(process.env.CRON_SECRET)\n  if (!authHeader || authHeader !== `Bearer ${process.env.CRON_SECRET}`) {\n    return new NextResponse('Unauthorized', {\n      status: 401,\n      headers: { 'WWW-Authenticate': 'Bearer' }\n    });\n  }\n\n  // Request upcoming and completed fights\n  async function getFights() {\n    try{\n        const baseUrl = 'https://api.the-odds-api.com/v4/sports/boxing_boxing/scores'\n        const params = new URLSearchParams({\n            apiKey: process.env.ODDS_API_KEY ? process.env.ODDS_API_KEY : '',\n            regions: 'us',\n            daysFrom: '3'\n        })\n        const response = await fetch(`${baseUrl}?${params}`)\n        if(!response.ok) throw new Error(`HTTP error status: ${response.status}`)\n        const data = response.json()\n        return data\n    }\n    catch(e) {\n        console.log('getFights failed: ' + e)\n        throw e\n    }\n  }\n\n  // Check if the database contains the given event\n  async function dbContainsEvent(fight: ScoreResponse){\n    const { data, error } = await supabase.from('events').select('*').eq('id', fight.id);\n    if (error) {\n      console.error('dbContainsEvent query error:', error);\n      throw error;\n    }\n    return (data && data.length > 0)\n  }\n\n  // check if a event is already complete\n  async function getEventCompleted(fight: ScoreResponse) {\n    // get event complete data\n    const { data, error } = await supabase.from('events').select('completed').eq('id', fight.id);\n    if (error) {\n        console.error('getEventCompleted query error:', error);\n        throw error;\n    }\n    console.log('event completed data:')\n    console.log(data)\n    return false\n  }\n\n  async function insertEvent(fight: ScoreResponse) {\n    const { data, error } = await supabase\n      .from('events')\n      .insert({\n        id: fight.id,\n        sport_key: fight.sport_key,\n        sport_title: fight.sport_title,\n        commence_time: fight.commence_time,\n        completed: fight.completed,\n        home_team: fight.home_team,\n        away_team: fight.away_team,\n        scores: fight.scores,\n        last_updated: fight.last_updated\n      })\n      .select('*')\n      .single();\n  \n    if (error) {\n      console.error('Insert error:', error);\n      throw error;\n    }\n  \n    return data;\n  }\n\n  async function updateEvent(fight:ScoreResponse) {\n    try {\n      const { data, error } = await supabase\n        .from('events')\n        .update({\n          sport_key: fight.sport_key,\n          scores: fight.scores,\n          completed: fight.completed,\n          last_updated: new Date().toISOString()\n        })\n        .eq('id', fight.id)\n        .select('*')\n        .single();\n  \n      if (error) throw error;\n      return data;\n      \n    } catch (error) {\n      console.error('Update error:', error);\n      return null;\n    }\n  }\n  \n\n  // create or update fight events in db\n  async function updateFights(fights : ScoreResponse[]) {\n    let apiEventCount = fights.length\n    let insertedCount = 0\n    let updateCount = 0\n    for ( const fight of fights ) {\n        if (!dbContainsEvent(fight)) { // event not yet in db -> add it\n            const insertRes = await insertEvent(fight)\n            insertedCount++\n        }else{ // event in db -> check for score update\n            // api res fight completed, db event not complete, then update db with final score\n            if( fight.completed == \"true\" && (!await getEventCompleted(fight)) ) { \n                updateEvent(fight)\n                updateCount++\n            }\n        }\n    }\n\n    // monitoring\n    console.log('Update Summary:')\n    console.log(`API found ${apiEventCount} items`)\n    console.log(`Inserted ${insertedCount} new items`)\n    console.log(`Updated ${updateCount} completed items`)\n  }\n\n  // Proceed with database operations after successful auth\n  const supabase = await createClient();\n  \n  try {\n\n    const fights = await getFights()\n\n    await updateFights(fights)\n\n    const { data, error } = await supabase.from('testTbl').select('*');\n\n    if (error) throw error;\n    \n    console.log('Cron job results:', data);\n    \n    return NextResponse.json({\n      success: true,\n      count: data.length,\n      results: data\n    });\n\n  } catch (err: any) {\n    console.error('Cron job failed:', err.message);\n    return NextResponse.json(\n      { success: false, error: err.message },\n      { status: 500 }\n    );\n  }\n}\n\nexport const dynamic = 'force-dynamic';\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 276, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}