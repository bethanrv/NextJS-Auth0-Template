{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/actions/createAccessToken.ts"],"sourcesContent":["\"use server\";\n\nimport axios from \"axios\";\n\ninterface AccessTokenResponse {\n  access_token: string;\n  expires_in: number;\n  token_type: string;\n}\n\n// Create an access token for the Auth0 management API, this is used to fetch user roles\nexport async function createAccessToken(): Promise<string> {\n  try {\n    const response = await axios.post<AccessTokenResponse>(\n      `${process.env.AUTH0_ISSUER_BASE_URL}/oauth/token`,\n      new URLSearchParams({\n        grant_type: \"client_credentials\",\n        client_id: process.env.AUTH0_CLIENT_ID!,\n        client_secret: process.env.AUTH0_CLIENT_SECRET!,\n        audience: `${process.env.AUTH0_ISSUER_BASE_URL}/api/v2/`,\n      }),\n      {\n        headers: {\n          \"content-type\": \"application/x-www-form-urlencoded\",\n        },\n      }\n    );\n\n    return response.data.access_token;\n  } catch (error) {\n    throw new Error(\"Failed to get Auth0 management token\");\n  }\n}\n"],"names":[],"mappings":";;;;;;AAEA;;;;AASO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAK,CAAC,IAAI,CAC/B,GAAG,QAAQ,GAAG,CAAC,qBAAqB,CAAC,YAAY,CAAC,EAClD,IAAI,gBAAgB;YAClB,YAAY;YACZ,WAAW,QAAQ,GAAG,CAAC,eAAe;YACtC,eAAe,QAAQ,GAAG,CAAC,mBAAmB;YAC9C,UAAU,GAAG,QAAQ,GAAG,CAAC,qBAAqB,CAAC,QAAQ,CAAC;QAC1D,IACA;YACE,SAAS;gBACP,gBAAgB;YAClB;QACF;QAGF,OAAO,SAAS,IAAI,CAAC,YAAY;IACnC,EAAE,OAAO,OAAO;QACd,MAAM,IAAI,MAAM;IAClB;AACF;;;IArBsB;;AAAA,iPAAA"}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/actions/getUsersRoles.ts"],"sourcesContent":["\"use server\";\n\nimport { createAccessToken } from \"./createAccessToken\";\nimport { getSession } from \"@auth0/nextjs-auth0\";\n\ntype Role = {\n  id: string;\n  name: string;\n  description: string;\n};\n\n// Get the roles for the current user in Auth0 Management API\nexport async function getUsersRoles(): Promise<Role[]> {\n  const session = await getSession();\n  const user = session?.user;\n\n  if (!user) {\n    throw new Error(\"User not authenticated\");\n  }\n\n  const token = await createAccessToken();\n\n  const response = await fetch(\n    `${process.env.AUTH0_ISSUER_BASE_URL}/api/v2/users/${user.sub}/roles`,\n    {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  );\n\n  if (!response.ok) {\n    throw new Error(\"Failed to fetch user roles\");\n  }\n\n  const data: Role[] = await response.json();\n  return data;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;;;AASO,eAAe;IACpB,MAAM,UAAU,MAAM,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD;IAC/B,MAAM,OAAO,SAAS;IAEtB,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,QAAQ,MAAM,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD;IAEpC,MAAM,WAAW,MAAM,MACrB,GAAG,QAAQ,GAAG,CAAC,qBAAqB,CAAC,cAAc,EAAE,KAAK,GAAG,CAAC,MAAM,CAAC,EACrE;QACE,QAAQ;QACR,SAAS;YACP,QAAQ;YACR,eAAe,CAAC,OAAO,EAAE,OAAO;QAClC;IACF;IAGF,IAAI,CAAC,SAAS,EAAE,EAAE;QAChB,MAAM,IAAI,MAAM;IAClB;IAEA,MAAM,OAAe,MAAM,SAAS,IAAI;IACxC,OAAO;AACT;;;IA3BsB;;AAAA,iPAAA"}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/actions/isUserAdmin.tsx"],"sourcesContent":["\"use server\";\n\nimport { getUsersRoles } from \"./getUsersRoles\";\n\n// Check if the current user is an admin\nexport async function isUserAdmin(): Promise<boolean> {\n  try {\n    const roles = await getUsersRoles();\n\n    console.log(\"ROLES\", roles);\n    return roles.some((role) => role.name.toLowerCase() === \"admin\"); // or can check for rol_DzoN34zS1PFnEfY4\n  } catch (error) {\n    console.error(\"Error checking admin status:\", error);\n    return false;\n  }\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,QAAQ,MAAM,CAAA,GAAA,0HAAA,CAAA,gBAAa,AAAD;QAEhC,QAAQ,GAAG,CAAC,SAAS;QACrB,OAAO,MAAM,IAAI,CAAC,CAAC,OAAS,KAAK,IAAI,CAAC,WAAW,OAAO,UAAU,wCAAwC;IAC5G,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;IACT;AACF;;;IAVsB;;AAAA,iPAAA"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport const createClient = async () => {\n  const cookieStore = await cookies() // Add await here\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          cookieStore.set({ name, value, ...options })\n        },\n        remove(name: string, options: CookieOptions) {\n          cookieStore.set({ name, value: '', ...options })\n        }\n      }\n    }\n  )\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;;;AAGO,MAAM,eAAe;IAC1B,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,IAAI,iBAAiB;;IAErD,OAAO,CAAA,GAAA,2KAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,YAAY,GAAG,CAAC;oBAAE;oBAAM;oBAAO,GAAG,OAAO;gBAAC;YAC5C;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,YAAY,GAAG,CAAC;oBAAE;oBAAM,OAAO;oBAAI,GAAG,OAAO;gBAAC;YAChD;QACF;IACF;AAEJ"}},
    {"offset": {"line": 328, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file:///Users/brv/Documents/NextJS-Auth0-Template/app/api/protected/updateEvent/route.ts"],"sourcesContent":["import { isUserAdmin } from \"@/actions/isUserAdmin\";\nimport { NextResponse } from \"next/server\";\nimport { createClient } from \"@/utils/supabase/server\";\n\nexport async function POST(request: Request) {\n  // Check admin access\n  const isAdmin = await isUserAdmin();\n  if (!isAdmin) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  try {\n    // Parse the incoming JSON request\n    const { id, home_team, away_team } = await request.json();\n\n    // Create a Supabase client instance\n    const supabase =  await createClient();\n    // Update the event where the id matches\n    const { data, error } = await supabase\n      .from(\"events\")\n      .update({ home_team, away_team })\n      .eq(\"id\", id)\n      .select(); // Returns the updated record(s)\n\n    if (error) {\n      return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n\n    return NextResponse.json({ data }, { status: 200 });\n  } catch (err: any) {\n    return NextResponse.json({ error: err.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,qBAAqB;IACrB,MAAM,UAAU,MAAM,CAAA,GAAA,yHAAA,CAAA,cAAW,AAAD;IAChC,IAAI,CAAC,SAAS;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACpE;IAEA,IAAI;QACF,kCAAkC;QAClC,MAAM,EAAE,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEvD,oCAAoC;QACpC,MAAM,WAAY,MAAM,CAAA,GAAA,6HAAA,CAAA,eAAY,AAAD;QACnC,wCAAwC;QACxC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAC3B,IAAI,CAAC,UACL,MAAM,CAAC;YAAE;YAAW;QAAU,GAC9B,EAAE,CAAC,MAAM,IACT,MAAM,IAAI,gCAAgC;QAE7C,IAAI,OAAO;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,OAAO;YAAC,GAAG;gBAAE,QAAQ;YAAI;QACnE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAK,GAAG;YAAE,QAAQ;QAAI;IACnD,EAAE,OAAO,KAAU;QACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,IAAI,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACjE;AACF"}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}